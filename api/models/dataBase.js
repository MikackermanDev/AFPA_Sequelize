// CrÃ©er un objet Db qui va contenir les Ã©lÃ©ments nÃ©cessaires pour gÃ©rer la base de donnÃ©es
const Db = {};
// Importer Sequelize et DataTypes depuis le module sequelize
// Sequelize est un ORM qui permet de manipuler des bases de donnÃ©es relationnelles avec du code JavaScript
// DataTypes est un objet qui contient les types de donnÃ©es disponibles pour les modÃ¨les
const { Sequelize, DataTypes } = require("sequelize");
// Importer la configuration depuis le fichier config.js
const myConfig = require("../config");

// Extraire les informations de connexion Ã  la base de donnÃ©es depuis la configuration
const { host, port, database, user, password } = myConfig.db;
// CrÃ©er une instance de Sequelize pour se connecter Ã  la base de donnÃ©es
Db.connection = new Sequelize(database, user, password, {
	host,
	port,
	dialect: "mysql",
});

// DÃ©finir un objet commonField qui contient des attributs communs Ã  tous les modÃ¨les
Db.commonField = {
	id: {
		type: DataTypes.INTEGER, // Le type de l'attribut id est un entier
		autoIncrement: true, // L'attribut id s'incrÃ©mente automatiquement
		primaryKey: true, // L'attribut id est la clÃ© primaire de la table
	},
	createdBy: {
		type: DataTypes.INTEGER, // Le type de l'attribut createdBy est un entier
	},
	updatedBy: {
		type: DataTypes.INTEGER, // Le type de l'attribut updatedBy est un entier
	},
	deletedBy: {
		type: DataTypes.INTEGER, // Le type de l'attribut deletedBy est un entier
	},
};

// DÃ©finir une mÃ©thode getModel qui permet de rÃ©cupÃ©rer les modÃ¨les dÃ©finis dans la base de donnÃ©es
// Si un nom de modÃ¨le est passÃ© en paramÃ¨tre, la mÃ©thode renvoie le modÃ¨le correspondant
// Sinon, la mÃ©thode renvoie tous les modÃ¨les disponibles
Db.getModel = (modelName = null) => {
	if (!Db.models) {
		require("."); // Importer le fichier index.js qui contient les dÃ©finitions des modÃ¨les
		Db.models = Db.connection.models; // Stocker les modÃ¨les dans l'objet Db
	}
	if (modelName) {
		return Db.models[modelName]; // Renvoyer le modÃ¨le demandÃ©
	}
	return Db.models; // Renvoyer tous les modÃ¨les
};

// DÃ©finir une mÃ©thode synchronize qui permet de synchroniser la base de donnÃ©es avec les modÃ¨les dÃ©finis
// La mÃ©thode prend en paramÃ¨tre un objet option qui peut contenir des paramÃ¨tres de synchronisation
// Par dÃ©faut, l'option alter est Ã  true, ce qui signifie que la base de donnÃ©es sera modifiÃ©e pour correspondre aux modÃ¨les
Db.synchronize = (option = { alter: true }) => {
	if (!Db.models) {
		require("."); // Importer le fichier index.js qui contient les dÃ©finitions des modÃ¨les
		Db.models = Db.connection.models; // Stocker les modÃ¨les dans l'objet Db
	}
	Db.connection.sync(option); // Synchroniser la base de donnÃ©es avec les modÃ¨les
};

// DÃ©claration de la fonction Db.selectAll qui prend en paramÃ¨tre le nom d'une table
Db.selectAll = async (modelName) => {
	try {
		// On utilise la mÃ©thode getModel de l'objet Db pour rÃ©cupÃ©rer le modÃ¨le de la table Ã  partir du nom
		const rows = await Db.getModel(modelName)?.findAll();
		// On utilise la mÃ©thode findAll du modÃ¨le pour sÃ©lectionner toutes les lignes de la table
		// On utilise le mot-clÃ© await pour attendre la rÃ©solution de la promesse renvoyÃ©e par findAll
		// On utilise l'opÃ©rateur ?. pour vÃ©rifier que le modÃ¨le existe avant d'appeler la mÃ©thode findAll
		// On stocke le rÃ©sultat dans la variable rows
		return { data: rows, result: true, message: "OK ğŸ†—" };
		// On renvoie un objet avec trois propriÃ©tÃ©s : data contient les lignes trouvÃ©es, result contient un boolÃ©en indiquant le succÃ¨s de l'opÃ©ration, et message contient un emoji
	} catch (err) {
		// En cas d'erreur lors de l'exÃ©cution du bloc try, on exÃ©cute le bloc catch
		return { data: rows, result: true, message: "ğŸ˜¡" };
		// On renvoie un objet similaire au prÃ©cÃ©dent mais avec un message d'Ã©chec
	}
};

// DÃ©claration de la fonction Db.selectOne qui prend en paramÃ¨tre le nom d'une table et l'identifiant d'une ligne
Db.selectOne = async (modelName) => {
	try {
		// On utilise la mÃªme mÃ©thode que prÃ©cÃ©demment pour rÃ©cupÃ©rer le modÃ¨le de la table
		const rows = await Db.getModel(modelName)?.findByPk(id);
		// On utilise la mÃ©thode findByPk du modÃ¨le pour sÃ©lectionner une ligne par son identifiant
		return { data: rows, result: true, message: "OK ğŸ†—" };
		// On renvoie un objet avec les mÃªmes propriÃ©tÃ©s que prÃ©cÃ©demment
	} catch (err) {
		// En cas d'erreur lors de l'exÃ©cution du bloc try, on exÃ©cute le bloc catch
		return { data: rows, result: true, message: "ğŸ˜¡" };
		// On renvoie un objet similaire au prÃ©cÃ©dent mais avec un message d'Ã©chec
	}
};

// DÃ©claration de la fonction Db.selectWhere qui prend en paramÃ¨tre le nom d'une table et une condition
Db.selectWhere = async (modelName) => {
	try {
		// On utilise la mÃªme mÃ©thode que prÃ©cÃ©demment pour rÃ©cupÃ©rer le modÃ¨le de la table
		const rows = await Db.getModel(modelName)?.findAll({ where });
		// On utilise la mÃ©thode findAll du modÃ¨le avec l'option where pour sÃ©lectionner des lignes selon une condition
		return { data: rows, result: true, message: "OK ğŸ†—" };
		// On renvoie un objet avec les mÃªmes propriÃ©tÃ©s que prÃ©cÃ©demment
	} catch (err) {
		// En cas d'erreur lors de l'exÃ©cution du bloc try, on exÃ©cute le bloc catch
		return { data: rows, result: true, message: "ğŸ˜¡" };
		// On renvoie un objet similaire au prÃ©cÃ©dent mais avec un message d'Ã©chec
	}
};

// DÃ©claration de la fonction Db.insertOrUpdate qui prend en paramÃ¨tre le nom d'une table et un objet JSON reprÃ©sentant des lignes Ã  insÃ©rer ou Ã  mettre Ã  jour
Db.insertOrUpdate = async (modelName, json) => {
	if (!Array.isArray(json)) {
		// Si l'objet JSON n'est pas un tableau, on le transforme en tableau avec un seul Ã©lÃ©ment
		json = [json];
	}
	const fields = Object.keys(Db.getModel(modelName).rawAttributes);
	// On utilise la mÃ©thode Object.keys pour rÃ©cupÃ©rer les noms des attributs du modÃ¨le de la table
	// On utilise la mÃªme mÃ©thode que prÃ©cÃ©demment pour rÃ©cupÃ©rer le modÃ¨le de la table
	// On stocke le rÃ©sultat dans la variable fields
	const rows = await Db.getModel(modelName).bulkCreate(json, {
		updateOnDuplicate: fields,
		individualHooks: true,
	});
	// On utilise la mÃ©thode bulkCreate du modÃ¨le pour insÃ©rer ou mettre Ã  jour des lignes en masse
	// On passe en paramÃ¨tre le tableau json contenant les objets Ã  insÃ©rer ou Ã  mettre Ã  jour
	// On passe Ã©galement un objet d'options avec deux propriÃ©tÃ©s : updateOnDuplicate contient le tableau fields indiquant quels attributs doivent Ãªtre mis Ã  jour en cas de doublon, et individualHooks contient un boolÃ©en indiquant si les hooks doivent Ãªtre exÃ©cutÃ©s pour chaque ligne
	// On utilise le mot-clÃ© await pour attendre la rÃ©solution de la promesse renvoyÃ©e par bulkCreate
	// On stocke le rÃ©sultat dans la variable rows
	return { data: rows, result: true, message: "OK ğŸ†—" };
	// On renvoie un objet avec les mÃªmes propriÃ©tÃ©s que prÃ©cÃ©demment
};

// DÃ©claration de la fonction Db.deleteOne qui prend en paramÃ¨tre le nom d'une table et l'identifiant d'une ligne Ã  supprimer
Db.deleteOne = async (modelName, id) => {
	const exists = await Db.getModel(modelName)?.destroy({ where: { id } });
	// On utilise la mÃ©thode destroy du modÃ¨le pour supprimer une ligne selon une condition
	// On passe en paramÃ¨tre un objet avec la propriÃ©tÃ© where contenant un objet avec l'identifiant de la ligne Ã  supprimer
	// On stocke le rÃ©sultat dans la variable exists qui indique si la ligne existait avant la suppression
	return { data: exists, result: true, message: "OKğŸ†—" };
	// On renvoie un objet avec les mÃªmes propriÃ©tÃ©s que prÃ©cÃ©demment mais avec data contenant le boolÃ©en exists
};

// Exporter l'objet Db et DataTypes pour pouvoir les utiliser dans d'autres fichiers
module.exports = { ...Db, DataTypes };
